# -*- coding: utf-8 -*-
""" World module for resolving actions that have a random component.
This is more or less analygous to rolling dice in a table-top RPG

There will be two types of rolls available and both may be used
together to resolve a random interaction. The typws are:
    1. A number chosen from a normal distribution (ex. bell curve)
    2. Random numbers generated by 'rolling' a number of dice, such as 2d20
       denoting adding the outcome of two random numbers between 1 & 20
       
Rolls can be a critical success or failure as well. For numbers from a
random distribution, any number above 1.25 the median or below .75 times
the median will be considered a critial success or failure. For dice rolls,
a roll of 1 is a critical failure and a maximum roll (ex. 20 on a d20) will
be considered a critical success.

in HG, characters learn from their successes and failures. Character (and NPC)
progression is driven by these criticals, regardless of the outcome of the
random interaction.
"""
import random
from evennia.utils.logger import log_file

# roll controller
def return_a_roll(return_crit: bool, dist_mean: int, *argv):
    """
    Roller controller that can return a total roll for any of three scenarios:
    1. A roll from a normal distribution
    2. A roll of any number of dice of any number of sides. These should be
       passed as key/value pairs, with the key being the number of sides and
       the number of dice/times to roll being the value
    3. A combination of a distribution roll and any number of dice rolls

    Args:
        mean (int): Mean of the disctribution the result is from. 0 is used
                    in the case where we do not want to return a number from
                    a distribution
        *args (strings): A series of dice rolls of the form NdX (ex. 2d20 would
                       be 2 rolls of a 20 sided die)

    Returns:
        total(int): The result of the dice rolls
        critical (bool): Did a critical success or failure happen
    """
    total = 0
    critical = False
    
    # check if we want to call the dist roll func. Call if wanted
    if dist_mean != 0:
        dist_roll, dist_crit = return_dist_roll(dist_mean)
        if dist_crit:
            critical = True
    else:
        dist_roll = 0
    total += dist_roll
    
    # check for dice rolls to perform
    for arg in argv:
        num_of_dice = int(arg[0])
        num_of_sides = int(arg[2:])
        dice_roll, dice_crit = return_dice_roll(num_of_dice, num_of_sides)
        total += dice_roll
        if dice_crit:
            critical = True
    
    log_file(f"Roll: {total}, Crit: {critical}", filename="randomness.log")
    if return_crit:
        return total, critical
    else:
        return total
    

# distribution roll
def return_dist_roll(mean: int):
    """Takes in an integer representing the mean of a normal distribution
    and returns an random intger from that distribution and a boolean true
    if this roll is a critical success or failure
    
    Args:
        mean (int): Mean of the disctribution the result is from
        
    Returns:
        total(int): The result of the dice rolls
        critical (bool): Did a critical success or failure happen
    """
    roll = int(random.normalvariate(mu=mean, sigma=1.0))
    if roll >= mean * 1.25 or roll <= mean * .75:
        # critical success or critical failue
        return roll, True
    else:
        return roll, False


# dice roller
def return_dice_roll(num_of_dice: int, num_of_sides: int):
    """
    
    Dice roller that can roll a N sided dice any number of times and return the result.
    Rolls of 1 are a critical failure. Max rolls are a critical success. Critical sucesses
    result in a bonus dice roll and critical failures result in the loss of a die roll.

    Args:
        num_of_dice (int): Number of times to roll a 'die'
        num_of_sides (int): Number of sides the 'die' has
        
    Returns:
        total(int): The result of the dice rolls
        critical (bool): Did a critical success or failure happen
    """
    total = 0
    critical = False
    while num_of_dice > 0:
        this_roll = random.randint(1, num_of_sides)
        total += this_roll
        if this_roll == num_of_sides:
            # critical success
            critical = True
            num_of_dice += 1
        elif this_roll == 1:
            # critical failure
            critical = True
            num_of_dice -= 2
        else:
            num_of_dice -= 1
    return total, critical